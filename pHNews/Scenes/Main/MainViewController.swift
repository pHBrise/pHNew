//
//  MainViewController.swift
//  pHNews
//
//  Created by Phanvit Chevamongkolnimit on 18/8/2567 BE.
//  Copyright (c) 2567 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MainDisplayLogic: AnyObject
{
    func displayNews(viewModel: Main.News.ViewModel)
}

class MainViewController: UIViewController, MainDisplayLogic
{
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        setupCategoryView()
        
        tableView.register(UINib(nibName: "NewsTableViewCell", bundle: nil), forCellReuseIdentifier: "NewsTableViewCell")
        tableView.delegate = self
        tableView.dataSource = self
        
        fatchNews(category: "")
    }
    
    
    
    // MARK: Do something
    var newsArticle:[NewsArticle] = []
    var selectedButton: UIButton?
    
    @IBOutlet weak var categoryView: UIView!
    @IBOutlet weak var tableView: UITableView!
    
    
    func setupCategoryView() {
        
        let scrollView = UIScrollView()
        scrollView.showsHorizontalScrollIndicator = false
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        categoryView.addSubview(scrollView)
        NSLayoutConstraint.activate([
            scrollView.leadingAnchor.constraint(equalTo: categoryView.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: categoryView.trailingAnchor),
            scrollView.topAnchor.constraint(equalTo: categoryView.topAnchor),
            scrollView.bottomAnchor.constraint(equalTo: categoryView.bottomAnchor)
        ])
        let buttons = createCategoryButtons()
        let stackView = UIStackView(arrangedSubviews: buttons)
        stackView.axis = .horizontal
        
        stackView.spacing = 12
        stackView.translatesAutoresizingMaskIntoConstraints = false
        scrollView.addSubview(stackView)
        
        NSLayoutConstraint.activate([
            stackView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor, constant: 8),
            stackView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor, constant: -8),
            stackView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            stackView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            stackView.heightAnchor.constraint(equalTo: scrollView.heightAnchor)
        ])
    }
    
    func createCategoryButtons() -> [UIButton] {
        return NewsCategory.allCases.map { buttonType in
            let button = UIButton(type: .system)
            button.setTitle(buttonType.rawValue, for: .normal)
            button.titleLabel?.font = .systemFont(ofSize: 20)
            button.setTitleColor(.gray, for: .normal)
            button.addTarget(self, action: #selector(buttonTapped(_:)), for: .touchUpInside)
            return button
        }
    }
    
    func fatchNews(category: String) {
        let request = Main.News.Request.TopHeadline(topHeadline: TopHeadlineRequest(country: "us",category: category))
        interactor?.requestNewsTopHeadline(request: request)
    }
    
    @objc func buttonTapped(_ sender: UIButton) {
        sender.setTitleColor(.black, for: .normal)
        guard let title = sender.title(for: .normal) else { return }
        fatchNews(category: title)
        if selectedButton != nil {
            selectedButton?.setTitleColor(.gray, for: .normal)
        }
        selectedButton = sender

    }
    
    func displayNews(viewModel: Main.News.ViewModel)
    {
        if let listNews = viewModel.listNews {
            newsArticle = listNews
            tableView.reloadData()
        } else {
            newsArticle = []
            tableView.reloadData()
        }
    }
    
}

extension MainViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return newsArticle.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "NewsTableViewCell", for: indexPath) as! NewsTableViewCell
        cell.displayNews(newsArticle[indexPath.row])
        return cell
    }
    
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.router?.routeToDetail(url: newsArticle[indexPath.row].url)
    }
    
    
}
